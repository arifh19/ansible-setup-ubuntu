---
  - name: 'Setup DB Server'
    hosts: dbcenter
    become: true
    vars:
      remote_file_stag: /home/ansman/db-restaurant_stag
      remote_file_prod: /home/ansman/db-restaurant_prod
      user: ansman
      userDb: arifh19

    tasks:
      - name: Install aptitude using apt
        apt: name=aptitude state=latest update_cache=yes force_apt_get=yes

      - name: Install required system packages
        apt: name={{ item }} state=latest update_cache=yes
        loop: [ 'apt-transport-https', 'ca-certificates', 'software-properties-common']

      - name: Add Docker GPG apt Key
        apt_key:
          url: https://download.docker.com/linux/ubuntu/gpg
          state: present

      - name: Add Docker Repository
        apt_repository:
          repo: deb https://download.docker.com/linux/ubuntu bionic stable
          state: present

      - name: Update apt and install docker-ce
        apt: update_cache=yes name=docker-ce state=latest

      - name: Add user to group Docker
        become: true
        user:
          name: ansman
          shell: /bin/bash
          groups: docker
          append: yes
      
      - name: Install docker-compose
        become: true
        get_url: 
          url : https://github.com/docker/compose/releases/download/1.27.4/docker-compose-Linux-x86_64
          dest: /usr/local/bin/docker-compose
          owner: "{{user}}"
          group:  "{{user}}"
          mode: 'u+x,g+x'
      
      - name: Create a directory staging if it does not exist
        file:
          path: "{{remote_file_stag}}"
          state: directory
          mode: '0755'
     
      - name: Create a directory production if it does not exist
        file:
          path: "{{remote_file_prod}}"
          state: directory
          mode: '0755'      

      - name: Stop Docker Compose Staging
        args:
          chdir: "{{remote_file_stag}}"
        command: docker-compose -f docker-compose.yml stop
        ignore_errors: True

      - name: Stop Docker Compose Production
        args:
          chdir: "{{remote_file_prod}}"
        command: docker-compose -f docker-compose.yml stop
        ignore_errors: True

      - name: Send docker-compose.yml staging to server
        copy:
          src: "docker-db/docker-compose.yml"
          dest: "{{remote_file_stag}}/docker-compose.yml"
          owner: "{{user}}"
          group: "{{user}}"
          mode: "u+x,g+x"

      - name: Send docker-compose.yml production to server
        copy:
          src: "docker-db/docker-compose.yml"
          dest: "{{remote_file_prod}}/docker-compose.yml"
          owner: "{{user}}"
          group: "{{user}}"
          mode: "u+x,g+x"

      - name: Send .env staging to server
        copy:
          src: "docker-db/.env.stag"
          dest: "{{remote_file_stag}}/.env"
          owner: "{{user}}"
          group: "{{user}}"
          mode: "u+x,g+x"

      - name: Send .env production to server
        copy:
          src: "docker-db/.env.prod"
          dest: "{{remote_file_prod}}/.env"
          owner: "{{user}}"
          group: "{{user}}"
          mode: "u+x,g+x"

      - name: Run Docker Compose Staging
        args:
          chdir: "{{remote_file_stag}}"
        command: docker-compose up -d

      - name: Run Docker Compose Production
        args:
          chdir: "{{remote_file_prod}}"
        command: docker-compose up -d

      - name: Wait for port 21999 (postgre staging) to become open on the host, don't start checking for 3 seconds
        wait_for:
          port: 21999
          delay: 3

      - name: Wait for port 29999 (postgre production) to become open on the host
        wait_for:
          port: 29999

      - name: Wait for port 21777 (redis production) to become open on the host
        wait_for:
          port: 21777

      - name: Wait for port 27777 (redis production) to become open on the host
        wait_for:
          port: 27777

